<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>

const int N = 2;
const int M = 1;
const int MaxSegmentNumber = 2;

typedef int[0, N - 1] id_t;
typedef struct {
    int period;
    int deadline;
    int offset;
    int pri;
    int number_of_segments;
    struct {
        int s_min;
        int s_max;
        int c_min;
        int c_max;
    } segments[MaxSegmentNumber];
} task_t;

id_t queue[N];
int[0,N] queue_len = 0;
int[0, M] avail_processors = M;

urgent chan run[N];
broadcast chan synch, first_synch;
chan priority first_synch &lt; run;
chan priority synch &lt; run;

const task_t Tasks[N] = {{ 4, 4, 0, 1, 2, {{0,  0, 0, 1}, {0, 0, 0, 1}}}, { 20, 20, 4, 2, 1, {{0, 0, 4, 4}, {0, 0, 0, 0}}}};

</declaration>
	<template>
		<name x="40" y="16">Periodic_Task</name>
		<parameter>const id_t id</parameter>
		<declaration>

clock x, t;

int[0, MaxSegmentNumber - 1] seg_idx;

void enqueue() {
    int tmp;
    queue[queue_len++] = id;
    if (queue_len &gt; 0) {
        int i = queue_len - 1;
        while (i &gt;= 1 &amp;&amp; Tasks[queue[i]].pri &lt; Tasks[queue[i - 1]].pri) {
            tmp = queue[i - 1];
            queue[i - 1] = queue[i];
            queue[i] = tmp;
            i--;
        }
    }
}

int period() {
    return Tasks[id].period;
}

int deadline() {
    return Tasks[id].deadline;
}

int offset() {
    return Tasks[id].offset;
}

int pri() {
    return Tasks[id].pri;
}

int s_min() {
    return Tasks[id].segments[seg_idx].s_min;
}

int s_max() {
    return Tasks[id].segments[seg_idx].s_max;
}

int c_min() {
    return Tasks[id].segments[seg_idx].c_min;
}

int c_max() {
    return Tasks[id].segments[seg_idx].c_max;
}

bool is_last_segment() {
    return seg_idx == Tasks[id].number_of_segments - 1;
}

</declaration>
		<location id="id0" x="807" y="391">
			<name x="815" y="365">Running</name>
			<label kind="invariant" x="824" y="391">x &lt;= c_max()</label>
		</location>
		<location id="id1" x="807" y="85">
			<name x="815" y="60">Suspended</name>
			<label kind="invariant" x="824" y="85">x &lt;= s_max()</label>
		</location>
		<location id="id2" x="450" y="229">
			<name x="459" y="203">Completed</name>
			<label kind="invariant" x="467" y="229">t &lt;= period()</label>
		</location>
		<location id="id3" x="807" y="-59">
			<name x="815" y="-84">Start</name>
			<label kind="invariant" x="824" y="-59">t &lt;= offset()</label>
		</location>
		<location id="id4" x="1020" y="238">
			<name x="1028" y="212">Miss</name>
		</location>
		<location id="id5" x="807" y="238">
			<name x="815" y="213">Ready</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="901" y="68">t &gt;  deadline()</label>
			<nail x="1020" y="85"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="629" y="153">!is_last_segment() &amp;&amp;
x &gt;= c_min() &amp;&amp;
t &lt;= deadline()</label>
			<label kind="synchronisation" x="629" y="204">first_synch?</label>
			<label kind="assignment" x="629" y="221">x = 0,
seg_idx++,
avail_processors++</label>
			<nail x="620" y="374"/>
			<nail x="620" y="136"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="459" y="280">is_last_segment() &amp;&amp;
x &gt;= c_min() &amp;&amp;
t &lt;= deadline()</label>
			<label kind="synchronisation" x="459" y="331">first_synch?</label>
			<label kind="assignment" x="458" y="348">seg_idx = 0,
avail_processors++</label>
			<nail x="450" y="391"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="688" y="306">x &gt;= c_min() &amp;&amp;
x &lt; c_max() &amp;&amp;
t &lt;= deadline()</label>
			<label kind="synchronisation" x="688" y="356">first_synch?</label>
			<nail x="764" y="374"/>
			<nail x="781" y="348"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="guard" x="816" y="119">x &gt;= s_min() &amp;&amp;
t &lt;= deadline()</label>
			<label kind="synchronisation" x="816" y="153">synch?</label>
			<label kind="assignment" x="816" y="170">enqueue()</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="688" y="0">x &gt;= s_min() &amp;&amp;
x &lt; s_max() &amp;&amp;
t &lt;= deadline()</label>
			<label kind="synchronisation" x="688" y="51">synch?</label>
			<nail x="764" y="68"/>
			<nail x="781" y="43"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="459" y="102">t == period()</label>
			<label kind="synchronisation" x="459" y="119">synch?</label>
			<label kind="assignment" x="459" y="136">t = 0,
x = 0</label>
			<nail x="450" y="85"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="816" y="-34">t == offset()</label>
			<label kind="synchronisation" x="816" y="-17">synch?</label>
			<label kind="assignment" x="816" y="0">t = 0,
x = 0,
seg_idx = 0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="901" y="221">t &gt;  deadline()</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="guard" x="909" y="374">t &gt;  deadline()</label>
			<nail x="1020" y="391"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="816" y="280">run[id]?</label>
			<label kind="assignment" x="816" y="297">x = 0</label>
		</transition>
	</template>
	<template>
		<name>Synchronizer</name>
		<location id="id6" x="-272" y="-357">
			<committed/>
		</location>
		<location id="id7" x="-357" y="-357">
			<committed/>
		</location>
		<location id="id8" x="-476" y="-357">
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-459" y="-416">synch!</label>
			<nail x="-272" y="-416"/>
			<nail x="-476" y="-416"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-340" y="-374">synch!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-459" y="-374">first_synch!</label>
		</transition>
	</template>
	<template>
		<name x="40" y="16">Scheduler</name>
		<declaration>

void dequeue() {
    int i = 0;
    queue_len -= 1;
    while (i &lt; queue_len)
    {
        queue[i] = queue[i + 1];
        i++;
    }
    queue[i] = 0;
}

id_t front() {
    return queue[0];
}

bool job_ready() {
    return queue_len &gt; 0;
}

bool processor_avail() {
    return avail_processors &gt; 0;
}

</declaration>
		<location id="id9" x="153" y="161">
			<name x="161" y="136">Scheduling</name>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="guard" x="-17" y="68">job_ready() &amp;&amp;
processor_avail()</label>
			<label kind="synchronisation" x="-17" y="102">run[front()]!</label>
			<label kind="assignment" x="-17" y="119">dequeue(),
avail_processors--</label>
			<nail x="111" y="144"/>
			<nail x="128" y="119"/>
		</transition>
	</template>
	<system>

system Scheduler, Synchronizer, Periodic_Task;

</system>
	<queries>
	</queries>
</nta>